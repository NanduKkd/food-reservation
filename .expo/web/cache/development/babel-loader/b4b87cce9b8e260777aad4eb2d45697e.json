{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport React, { Component } from 'react';\nimport { recipes, categories, ingredients } from \"./dataArrays\";\nimport App from \"../API/firebaseConfig\";\nimport { connect } from 'react-redux';\nimport store from \"../store\";\nvar state = store.getState();\nvar subscribe = store.subscribe(function () {\n  return state = store.getState();\n});\nexport function getCategoryById(categoryId) {\n  var category;\n  var categories = store.getState().categories;\n\n  for (var key in categories) {\n    if (categories[key].id == categoryId) {\n      category = categories[key];\n    }\n  }\n\n  return category;\n}\nexport function getIngredientName(ingredientID) {\n  var name;\n  ingredients.map(function (data) {\n    if (data.ingredientId == ingredientID) {\n      name = data.name;\n    }\n  });\n  return name;\n}\nexport function getIngredientUrl(ingredientID) {\n  var url;\n  ingredients.map(function (data) {\n    if (data.ingredientId == ingredientID) {\n      url = data.photo_url;\n    }\n  });\n  return url;\n}\nexport function getCategoryName(categoryId) {\n  var name;\n  var categories = state.categories;\n\n  for (var key in categories) {\n    if (categories[key].id == categoryId) {\n      name = categories[key].name;\n    }\n  }\n\n  return name;\n}\nexport function getProducts(categoryId) {\n  var productsArray = [];\n  var products = store.getState().products;\n\n  for (var key in products) {\n    if (products[key].categoryId == categoryId) {\n      productsArray.push(products[key]);\n    }\n  }\n\n  return productsArray;\n}\nexport function getRecipesByIngredient(ingredientId) {\n  var recipesArray = [];\n  recipes.map(function (data) {\n    data.ingredients.map(function (index) {\n      if (index[0] == ingredientId) {\n        recipesArray.push(data);\n      }\n    });\n  });\n  return recipesArray;\n}\nexport function getNumberOfRecipes(categoryId) {\n  var products = store.getState().products;\n  var count = 0;\n\n  for (var key in products) {\n    if (products[key].categoryId == categoryId) {\n      count++;\n    }\n  }\n\n  return count;\n}\nexport function getRecipesByCategoryName(categoryName) {\n  var categories = store.getState().categories;\n  var nameUpper = categoryName.toUpperCase();\n  var productsArray = [];\n\n  for (var key in categories) {\n    if (categories[key].name.toUpperCase().includes(nameUpper)) {\n      var products = getProducts(categories[key].id);\n      products.map(function (item) {\n        productsArray.push(item);\n      });\n    }\n  }\n\n  return productsArray;\n}\nexport function getRecipesByRecipeName(productsName) {\n  var products = store.getState().products;\n  var nameUpper = productsName.toUpperCase();\n  var productsArray = [];\n\n  for (var key in products) {\n    if (products[key].title.toUpperCase().includes(nameUpper)) {\n      productsArray.push(products[key]);\n    }\n  }\n\n  return productsArray;\n}\nexport function convertObToArr(obj) {\n  var resultArr = [];\n  Object.keys(obj).map(function (key) {\n    var curObj = {};\n    curObj[key] = obj[key];\n    resultArr = [].concat(_toConsumableArray(resultArr), [curObj]);\n  });\n  return resultArr;\n}\nexport function setAutoId(endpoint) {\n  App.db.ref(endpoint + \"/\").on('child_added', function (snapshot) {\n    App.db.ref(endpoint + \"/\" + snapshot.key).update({\n      id: snapshot.key\n    });\n    return snapshot.key;\n  });\n}","map":{"version":3,"sources":["C:/Users/shohrat.garadaghli/Desktop/dev/orderApp/src/data/MockDataAPI.js"],"names":["React","Component","recipes","categories","ingredients","App","connect","store","state","getState","subscribe","getCategoryById","categoryId","category","key","id","getIngredientName","ingredientID","name","map","data","ingredientId","getIngredientUrl","url","photo_url","getCategoryName","getProducts","productsArray","products","push","getRecipesByIngredient","recipesArray","index","getNumberOfRecipes","count","getRecipesByCategoryName","categoryName","nameUpper","toUpperCase","includes","item","getRecipesByRecipeName","productsName","title","convertObToArr","obj","resultArr","Object","keys","curObj","setAutoId","endpoint","db","ref","on","snapshot","update"],"mappings":"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","sourcesContent":["import { Alert, Text } from 'react-native';\nimport React, { Component } from 'react';\nimport { recipes, categories, ingredients } from './dataArrays';\nimport App from '../API/firebaseConfig';\nimport { connect } from 'react-redux';\nimport store from '../store';\n\nlet state=store.getState();\nconst subscribe = store.subscribe(() =>\n  state=store.getState()\n)\n\nexport function getCategoryById(categoryId) {\n  let category;\n  const categories=store.getState().categories;\n  \n  for (let key in categories){\n    if (categories[key].id == categoryId) {\n      category = categories[key]\n    }\n  }\n  return category;\n}\n\nexport function getIngredientName(ingredientID) {\n  let name;\n  ingredients.map(data => {\n    if (data.ingredientId == ingredientID) {\n      name = data.name;\n    }\n  });\n  return name;\n}\n\nexport function getIngredientUrl(ingredientID) {\n  let url;\n  ingredients.map(data => {\n    if (data.ingredientId == ingredientID) {\n      url = data.photo_url;\n    }\n  });\n  return url;\n}\n\n\nexport function getCategoryName (categoryId) {\n  \n  let name;\n  const categories=state.categories;\n  for (let key in categories){\n    if (categories[key].id == categoryId) {\n      name = categories[key].name;\n    }\n  }\n  return name;\n}\n\nexport function getProducts(categoryId) {\n  const productsArray=[];\n  const products=store.getState().products;\n  \n  for (let key in products){\n    if (products[key].categoryId == categoryId) {\n      productsArray.push(products[key]);\n    }\n  }\n  return productsArray;\n}\n\n// modifica\nexport function getRecipesByIngredient(ingredientId) {\n  const recipesArray = [];\n  recipes.map(data => {\n    data.ingredients.map(index => {\n      if (index[0] == ingredientId) {\n        recipesArray.push(data);\n      }\n    });\n  });\n  return recipesArray;\n}\n\n// const mapStateToProps=(state)=>({\n//   products:state.products\n// })\nexport function getNumberOfRecipes(categoryId) {\n  const products=store.getState().products;\n  let count = 0;\n  for (let key in products){\n    if (products[key].categoryId == categoryId) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*export function getAllIngredients(idArray) {\n  const ingredientsArray = [];\n  idArray.map(index => {\n    ingredients.map(data => {\n      if (data.ingredientId == index[0]) {\n        ingredientsArray.push([data, index[1]]);\n      }\n    });\n  });\n  return ingredientsArray;\n}*/\n\n// functions for search\n/*export function getRecipesByIngredientName(ingredientName) {\n  \n  const nameUpper = ingredientName.toUpperCase();\n  const productsArray = [];\n  ingredients.map(data => {\n    if (data.name.toUpperCase().includes(nameUpper)) {\n      // data.name.yoUpperCase() == nameUpper\n      const recipes = getRecipesByIngredient(data.ingredientId);\n      const unique = [...new Set(recipes)];\n      unique.map(item => {\n        productsArray.push(item);\n      });\n    }\n  });\n  const uniqueArray = [...new Set(productsArray)];\n  return uniqueArray;\n}*/\n\nexport function getRecipesByCategoryName(categoryName) {\n  const categories=store.getState().categories;\n  const nameUpper = categoryName.toUpperCase();\n  const productsArray = [];\n  // categories.map(data => {\n  //   if (data.name.toUpperCase().includes(nameUpper)) {\n  //     const recipes = getRecipes(data.id); // return a vector of recipes\n  //     recipes.map(item => {\n  //       recipesArray.push(item);\n  //     });\n  //   }\n  // });\n  for (let key in categories){\n    if (categories[key].name.toUpperCase().includes(nameUpper)){\n      const products = getProducts(categories[key].id);// return a vector of products\n      products.map(item => {\n        productsArray.push(item);\n      });\n    }\n  }\n  return productsArray;\n}\n\nexport function getRecipesByRecipeName(productsName) {\n\n  const products=store.getState().products;\n  const nameUpper = productsName.toUpperCase();\n  const productsArray = [];\n  for (let key in products){\n    if (products[key].title.toUpperCase().includes(nameUpper)) {\n      productsArray.push(products[key])\n    }\n  }\n\n  // recipes.map(data => {\n  //   if (data.title.toUpperCase().includes(nameUpper)) {\n  //     recipesArray.push(data);\n  //   }\n  // });\n\n  return productsArray;\n}\n\nexport function convertObToArr(obj){\n  let resultArr=[];\n  Object.keys(obj).map(key=>{\n    let curObj={};\n    curObj[key]=obj[key]\n    resultArr=[...resultArr,curObj]\n  })\n  return resultArr\n}\n\nexport function setAutoId(endpoint){\n  App.db.ref(`${endpoint}/`).on('child_added', function(snapshot) {\n    App.db.ref(`${endpoint}/${snapshot.key}`).update({\n      id:snapshot.key\n    })\n    return snapshot.key; // -KJ....\n  })\n}"]},"metadata":{},"sourceType":"module"}