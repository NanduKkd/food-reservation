{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\shohrat.garadaghli\\\\Desktop\\\\dev\\\\orderApp\\\\src\\\\screens\\\\Recipe\\\\RecipeScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport styles from \"./styles\";\nimport Carousel, { Pagination } from 'react-native-snap-carousel';\nimport { getIngredientName, getCategoryName, getCategoryById } from \"../../data/MockDataAPI\";\nimport BackButton from \"../../components/BackButton/BackButton\";\nimport ViewIngredientsButton from \"../../components/ViewIngredientsButton/ViewIngredientsButton\";\nimport PlaceOrderButton from \"../../components/PlaceOrderButton/PlaceOrder\";\nimport OrderFormModal from \"../../components/orderFormModal/OrderFormModal\";\nimport IngredientsDetailsScreen from \"../IngredientsDetails/IngredientsDetailsScreen\";\nimport App from \"../../API/firebaseConfig\";\nimport * as Permissions from 'expo-permissions';\nimport { Notifications } from 'expo';\nimport Constants from 'expo-constants';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    viewportWidth = _Dimensions$get.width;\n\nfunction sendPushNotification(expoPushToken, order) {\n  var title, dateOnly, timeOnly, number, name, surname, countFood, countPerson, messageTemplate, message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          title = order.title, dateOnly = order.dateOnly, timeOnly = order.timeOnly, number = order.number, name = order.name, surname = order.surname, countFood = order.countFood, countPerson = order.countPerson;\n          messageTemplate = \"\\n    ***New Order Received***\\n    Sifari\\u015F: \" + title + \",\\n    Tarix: \" + dateOnly + \",\\n    Zaman: \" + timeOnly + \"\\n  \";\n          message = {\n            to: expoPushToken,\n            sound: 'default',\n            title: 'Original Title',\n            body: messageTemplate,\n            data: {\n              message: messageTemplate\n            }\n          };\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Accept-encoding': 'gzip, deflate',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(message)\n          }));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar registerForPushNotificationsAsync = function registerForPushNotificationsAsync(order) {\n  var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status, token;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context2.next = 24;\n            break;\n          }\n\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context2.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context2.next = 12;\n            break;\n          }\n\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context2.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context2.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context2.abrupt(\"return\");\n\n        case 15:\n          _context2.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context2.sent;\n          updates = {};\n          updates['/expoToken'] = token;\n          App.db.ref('users').child('6GX8plM7xQUdikbbIi3bpsGqDUI3').update(updates);\n          sendPushNotification(token, order);\n          _context2.next = 25;\n          break;\n\n        case 24:\n          alert('Must use physical device for Push Notifications');\n\n        case 25:\n          if (Platform.OS === 'android') {\n            Notifications.createChannelAndroidAsync('default', {\n              name: 'default',\n              sound: 'true',\n              priority: 'max',\n              vibrate: [0, 250, 250, 250]\n            });\n          }\n\n        case 26:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar RecipeScreen = function (_React$Component) {\n  _inherits(RecipeScreen, _React$Component);\n\n  var _super = _createSuper(RecipeScreen);\n\n  function RecipeScreen(props) {\n    var _this;\n\n    _classCallCheck(this, RecipeScreen);\n\n    _this = _super.call(this, props);\n\n    _this.listenHandler = function (notification) {\n      _this.setState({\n        notification: notification\n      });\n    };\n\n    _this.renderImage = function (_ref) {\n      var item = _ref.item;\n      return React.createElement(TouchableHighlight, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 5\n        }\n      }, React.createElement(View, {\n        style: styles.imageContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        style: styles.image,\n        source: {\n          uri: item\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      })));\n    };\n\n    _this.onPressIngredient = function (item) {\n      var name = getIngredientName(item);\n      var ingredient = item;\n\n      _this.props.navigation.navigate('Ingredient', {\n        ingredient: ingredient,\n        name: name\n      });\n    };\n\n    _this.orderSuccess = function (order) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        orderSuccess: true,\n        orderStart: false\n      }));\n\n      registerForPushNotificationsAsync(order);\n    };\n\n    _this.orderFailed = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        orderSuccess: false,\n        orderStart: false\n      }));\n    };\n\n    _this.orderStart = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        orderStart: true,\n        orderModalShow: true\n      }));\n    };\n\n    _this.modalHide = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        orderModalShow: false\n      }));\n    };\n\n    _this.state = {\n      activeSlide: 0,\n      orderSuccess: null,\n      orderStart: false,\n      orderModalShow: false,\n      notification: null\n    };\n    return _this;\n  }\n\n  _createClass(RecipeScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.listener = Notifications.addListener(this.listenHandler);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _this$state$notificat;\n\n      var activeSlide = this.state.activeSlide;\n      var navigation = this.props.navigation;\n      var item = navigation.getParam('item');\n      var category = getCategoryById(item.categoryId);\n      var title = getCategoryName(category.id);\n\n      var submitOrderHandler = function submitOrderHandler(contactInfo) {\n        App.db.ref(\"orders/\").push({\n          orderedItem: item,\n          contactInfo: contactInfo\n        }).then(function () {\n          return _this2.orderSuccess(_objectSpread(_objectSpread({}, contactInfo), item));\n        }, function () {\n          return _this2.orderFailed();\n        });\n\n        _this2.modalHide();\n      };\n\n      return React.createElement(React.Fragment, null, ((_this$state$notificat = this.state.notification) == null ? void 0 : _this$state$notificat.origin) === 'selected' ? React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 15\n        }\n      }, JSON.stringify(this.state.notification.data))) : React.createElement(React.Fragment, null, this.state.orderModalShow ? React.createElement(OrderFormModal, {\n        clickToClose: this.modalHide,\n        submitOrderHandler: submitOrderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 35\n        }\n      }) : null, React.createElement(ScrollView, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.carouselContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.carousel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }\n      }, React.createElement(Carousel, {\n        ref: function ref(c) {\n          _this2.slider1Ref = c;\n        },\n        data: item.photosArray,\n        renderItem: this.renderImage,\n        sliderWidth: viewportWidth,\n        itemWidth: viewportWidth,\n        inactiveSlideScale: 1,\n        inactiveSlideOpacity: 1,\n        firstItem: 0,\n        loop: true,\n        autoplay: true,\n        autoplayDelay: 500,\n        autoplayInterval: 2000,\n        onSnapToItem: function onSnapToItem(index) {\n          return _this2.setState({\n            activeSlide: index\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }\n      }), React.createElement(Pagination, {\n        dotsLength: item.photosArray.length,\n        activeDotIndex: activeSlide,\n        containerStyle: styles.paginationContainer,\n        dotColor: \"rgba(255, 255, 255, 0.92)\",\n        dotStyle: styles.paginationDot,\n        inactiveDotColor: \"white\",\n        inactiveDotOpacity: 0.4,\n        inactiveDotScale: 0.6,\n        carouselRef: this.slider1Ref,\n        tappableDots: !!this.slider1Ref,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }\n      }))), React.createElement(View, {\n        style: styles.infoRecipeContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.infoRecipeName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }\n      }, item.title), React.createElement(View, {\n        style: styles.infoContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }\n      }, React.createElement(TouchableHighlight, {\n        onPress: function onPress() {\n          return navigation.navigate('RecipesList', {\n            category: category,\n            title: title\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.category,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }\n      }, getCategoryName(item.categoryId).toUpperCase()))), React.createElement(View, {\n        style: styles.infoContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }\n      }, React.createElement(Image, {\n        style: styles.infoPhoto,\n        source: require(\"../../../assets/icons/time.png\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }\n      }), React.createElement(Text, {\n        style: styles.infoRecipe,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }\n      }, item.time, \" minutes \")), React.createElement(View, {\n        style: styles.infoContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }\n      }, React.createElement(PlaceOrderButton, {\n        orderStart: this.orderStart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }\n      })), React.createElement(View, {\n        style: styles.infoContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.infoDescriptionRecipe,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }\n      }, item.description))))));\n    }\n  }]);\n\n  return RecipeScreen;\n}(React.Component);\n\nRecipeScreen.navigationOptions = function (_ref2) {\n  var navigation = _ref2.navigation;\n  return {\n    headerTransparent: 'true',\n    headerLeft: React.createElement(BackButton, {\n      onPress: function onPress() {\n        navigation.goBack();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    })\n  };\n};\n\nexport { RecipeScreen as default };","map":{"version":3,"sources":["C:/Users/shohrat.garadaghli/Desktop/dev/orderApp/src/screens/Recipe/RecipeScreen.js"],"names":["React","useEffect","styles","Carousel","Pagination","getIngredientName","getCategoryName","getCategoryById","BackButton","ViewIngredientsButton","PlaceOrderButton","OrderFormModal","IngredientsDetailsScreen","App","Permissions","Notifications","Constants","Dimensions","get","viewportWidth","width","sendPushNotification","expoPushToken","order","title","dateOnly","timeOnly","number","name","surname","countFood","countPerson","messageTemplate","message","to","sound","body","data","fetch","method","headers","Accept","JSON","stringify","registerForPushNotificationsAsync","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","updates","db","ref","child","update","Platform","OS","createChannelAndroidAsync","priority","vibrate","RecipeScreen","props","listenHandler","notification","setState","renderImage","item","imageContainer","image","uri","onPressIngredient","ingredient","navigation","navigate","orderSuccess","state","orderStart","orderFailed","orderModalShow","modalHide","activeSlide","listener","addListener","getParam","category","categoryId","id","submitOrderHandler","contactInfo","push","orderedItem","then","origin","flex","justifyContent","alignItems","container","carouselContainer","carousel","c","slider1Ref","photosArray","index","length","paginationContainer","paginationDot","infoRecipeContainer","infoRecipeName","infoContainer","toUpperCase","infoPhoto","require","infoRecipe","time","infoDescriptionRecipe","description","Component","navigationOptions","headerTransparent","headerLeft","goBack"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  FlatList,\n  ScrollView,\n  Text,\n  View,\n  TouchableOpacity,\n  Image,\n  Dimensions,\n  TouchableHighlight, Alert, Vibration, Platform\n} from 'react-native';\nimport styles from './styles';\nimport Carousel, { Pagination } from 'react-native-snap-carousel';\nimport { getIngredientName, getCategoryName, getCategoryById } from '../../data/MockDataAPI';\nimport BackButton from '../../components/BackButton/BackButton';\nimport ViewIngredientsButton from '../../components/ViewIngredientsButton/ViewIngredientsButton';\nimport PlaceOrderButton from '../../components/PlaceOrderButton/PlaceOrder';\nimport OrderFormModal from '../../components/orderFormModal/OrderFormModal';\nimport IngredientsDetailsScreen from '../IngredientsDetails/IngredientsDetailsScreen';\n\nimport App from '../../API/firebaseConfig';\nimport * as Permissions from 'expo-permissions'\nimport { Notifications } from 'expo';\nimport Constants from 'expo-constants';\n//import Notifications from 'expo-notifications'\n\nconst { width: viewportWidth } = Dimensions.get('window');\n\nasync function sendPushNotification(expoPushToken,order) {\n  const {title, dateOnly, timeOnly, number, name, surname, countFood, countPerson}=order;\n  const messageTemplate=`\n    ***New Order Received***\n    Sifariş: ${title},\n    Tarix: ${dateOnly},\n    Zaman: ${timeOnly}\n  `\n  const message = {\n    to: expoPushToken,\n    sound: 'default',\n    title: 'Original Title',\n    body: messageTemplate,\n    data: {message:messageTemplate},\n  };\n\n  await fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Accept-encoding': 'gzip, deflate',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  });\n}\n\n\nconst registerForPushNotificationsAsync = async (order) => {\n\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Permissions.getAsync(\n      Permissions.NOTIFICATIONS\n    );\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Permissions.askAsync(\n        Permissions.NOTIFICATIONS\n      );\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    let token = await Notifications.getExpoPushTokenAsync();\n    updates={};\n    updates['/expoToken']=token;\n    App.db.ref('users').child('6GX8plM7xQUdikbbIi3bpsGqDUI3').update(updates)\n    sendPushNotification(token, order)\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n  if (Platform.OS === 'android') {\n    Notifications.createChannelAndroidAsync('default', {\n      name: 'default',\n      sound: 'true',\n      priority: 'max',\n      vibrate: [0, 250, 250, 250],\n    });\n  }\n};\n\n\n\nexport default class RecipeScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    return {\n      headerTransparent: 'true',\n      headerLeft: (\n        <BackButton\n          onPress={() => {\n            navigation.goBack();\n          }}\n        />\n      )\n    };\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSlide: 0,\n      orderSuccess:null,\n      orderStart:false,\n      orderModalShow:false,\n      notification:null\n    };\n  }\n\n  listenHandler=(notification)=>{\n    this.setState({notification:notification})\n  }\n  componentDidMount(){\n    this.listener=Notifications.addListener(this.listenHandler)\n  }\n  /*componentWillUnmount(){\n\n  }*/\n  renderImage = ({ item }) => (\n    <TouchableHighlight>\n      <View style={styles.imageContainer}>\n        <Image style={styles.image} source={{ uri: item }} />\n      </View>\n    </TouchableHighlight>\n  );\n\n  onPressIngredient = item => {\n    var name = getIngredientName(item);\n    let ingredient = item;\n    this.props.navigation.navigate('Ingredient', { ingredient, name });\n  };\n  orderSuccess=(order)=>{\n    this.setState({\n      ...this.state,\n      orderSuccess:true,\n      orderStart:false\n    });\n    registerForPushNotificationsAsync(order);\n  };\n  orderFailed=()=>{\n    this.setState({\n      ...this.state,\n      orderSuccess:false,\n      orderStart:false\n    })\n  }\n  orderStart=()=>{\n    this.setState({\n      ...this.state,\n      orderStart:true,\n      orderModalShow:true\n    })\n  }\n  modalHide=()=>{\n    this.setState({\n      ...this.state,\n      orderModalShow:false\n    })\n  };\n\n  render() {\n    const { activeSlide } = this.state;\n    const { navigation } = this.props;\n    const item = navigation.getParam('item');\n    const category = getCategoryById(item.categoryId);\n    const title = getCategoryName(category.id);\n\n    const submitOrderHandler=(contactInfo)=>{\n      App.db.ref(`orders/`).push({ orderedItem:item, contactInfo:contactInfo}).then(\n        ()=>this.orderSuccess({\n          ...contactInfo,\n          ...item\n        }),\n        ()=>this.orderFailed()\n    );\n      this.modalHide()\n    }\n    return (\n      <>\n        {\n          this.state.notification?.origin==='selected'? (\n            <View style={{flex:1, justifyContent:'center', alignItems:'center'}}>\n              <Text>\n                {JSON.stringify(this.state.notification.data)}\n              </Text>\n            </View>\n          ):\n          <>\n      {\n        this.state.orderModalShow?<OrderFormModal clickToClose={this.modalHide} submitOrderHandler={submitOrderHandler} />:null\n      }\n      \n      <ScrollView style={styles.container}>\n        <View style={styles.carouselContainer}>\n          <View style={styles.carousel}>\n            <Carousel\n              ref={c => {\n                this.slider1Ref = c;\n              }}\n              data={item.photosArray}\n              renderItem={this.renderImage}\n              sliderWidth={viewportWidth}\n              itemWidth={viewportWidth}\n              inactiveSlideScale={1}\n              inactiveSlideOpacity={1}\n              firstItem={0}\n              loop={true}\n              autoplay={true}\n              autoplayDelay={500}\n              autoplayInterval={2000}\n              onSnapToItem={index => this.setState({ activeSlide: index })}\n            />\n            <Pagination\n              dotsLength={item.photosArray.length}\n              activeDotIndex={activeSlide}\n              containerStyle={styles.paginationContainer}\n              dotColor=\"rgba(255, 255, 255, 0.92)\"\n              dotStyle={styles.paginationDot}\n              inactiveDotColor=\"white\"\n              inactiveDotOpacity={0.4}\n              inactiveDotScale={0.6}\n              carouselRef={this.slider1Ref}\n              tappableDots={!!this.slider1Ref}\n            />\n          </View>\n        </View>\n        <View style={styles.infoRecipeContainer}>\n          <Text style={styles.infoRecipeName}>{item.title}</Text>\n          <View style={styles.infoContainer}>\n            <TouchableHighlight\n              onPress={() => navigation.navigate('RecipesList', { category, title })}\n            >\n              <Text style={styles.category}>{getCategoryName(item.categoryId).toUpperCase()}</Text>\n            </TouchableHighlight>\n          </View>\n\n          <View style={styles.infoContainer}>\n            <Image style={styles.infoPhoto} source={require('../../../assets/icons/time.png')} />\n            <Text style={styles.infoRecipe}>{item.time} minutes </Text>\n          </View>\n\n          <View style={styles.infoContainer}>\n            {/* <ViewIngredientsButton\n              onPress={() => {\n                let ingredients = item.ingredients;\n                let title = 'Ingredients for ' + item.title;\n                navigation.navigate('IngredientsDetails', { ingredients, title });\n              }}\n            /> */}\n            <PlaceOrderButton orderStart={this.orderStart}/>\n            \n          </View>\n          <View style={styles.infoContainer}>\n            <Text style={styles.infoDescriptionRecipe}>{item.description}</Text>\n          </View>\n        </View>\n      </ScrollView>\n      </>\n        }\n      </>\n    );\n  }\n}\n\n/*cooking steps\n<View style={styles.infoContainer}>\n  <Image style={styles.infoPhoto} source={require('../../../assets/icons/info.png')} />\n  <Text style={styles.infoRecipe}>Cooking Steps</Text>\n</View>\n<Text style={styles.infoDescriptionRecipe}>{item.description}</Text>\n*/\n"]},"metadata":{},"sourceType":"module"}